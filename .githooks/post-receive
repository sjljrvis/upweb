#!/usr/bin/env node

/*
* NPM Dependecies
*/
const axios = require('../../../node_modules/axios');
const YAML = require('../../../node_modules/yaml');
const fs = require('fs');
const { exec } = require('child_process');
const readline = require('readline');
var buildPack = "default"

/*
* PATHS and variables
*/

const projectPath = __dirname.split('/').slice(0, 13).join('/').toString().trim();

let repository_name = __dirname.trim().split('/')[12];

/**
 * Fuctions
*/

const triggerBuild = (commitHash, callback) => {
  let options = {
    url: "http://localhost:3000/api/v1/container/build",
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    data: {
      build_pack: buildPack,
      repository_name: repository_name,
      commit_hash: commitHash
    },
    responseType: 'stream'
  }
  axios(options).then(res => {
    res.data.pipe(process.stdout);
    res.data.on('end', function () {
      process.exit(0)
    });
    // callback(null, res.data);
  })
}

const checkForBuildFile = (callback) => {
  const lookUpPath = `${projectPath}_docker/.dnow.yml`
  const check = fs.existsSync(lookUpPath);
  if (check){
    const file = fs.readFileSync(lookUpPath, 'utf8')
    buildPack = YAML.parse(file).buildpack
    callback(true);
  }
}

const checkoutTree = (commitHash, callback) => {
  exec(`GIT_WORK_TREE=${projectPath}_docker git checkout -f`, (err, stdout, stderr) => {
    if (err) {
      console.log("error in git-work-tree", err);
    }
    else {
      checkForBuildFile((res) => {
        triggerBuild(commitHash, (err, data) => {
          // callback(null, true);
        })
      })
    }
  })
}

/** 
 * Main REPL
*/

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});


rl.on('line', (input) => {
  let repoInfo = input.split(' ');
  let commitHash = repoInfo[1];
  checkoutTree(commitHash, (err, res) => {

  })
});
